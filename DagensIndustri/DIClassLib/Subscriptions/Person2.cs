using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DIClassLib.Misc;
using System.Data;
using DIClassLib.DbHandlers;


namespace DIClassLib.Subscriptions
{
    [Serializable]
    public class Person2
    {
        #region Constants
        private const int PHONE_MAX_NO_OF_DIGITS = 20;
        #endregion

        #region Properties
        public long Cusno { get; set; }
        public string UserName { get; set; }         //generated by oracle
        public string Password { get; set; }           //generated by oracle

        public bool IsSubscriber { get; private set; }  //subscriber = true / payer = false
        public bool HasPostalPlaceAddress { get; set; }

        public string FirstName { get; private set; }
        public string LastName { get; private set; }
        public string CareOf { get; private set; }
        public string Company { get; private set; }
        public string StreetName { get; private set; }
        public string HouseNo { get; private set; }
        public string StairCase { get; private set; }

        private string _stairs = string.Empty;
        public string Stairs
        {
            get
            {
                if (!string.IsNullOrEmpty(_stairs) && !_stairs.EndsWith("TR"))
                    return _stairs + "TR";

                return _stairs;
            }
            private set { _stairs = value; }
        }

        public string ApartmentNo { get; private set; }
        public string ZipCode { get; private set; }
        public string City { get; private set; }
        public string MobilePhone { get; private set; }
        public string Email { get; private set; }
        public string SocialSecurityNo { get; private set; }
        public string CompanyNo { get; private set; }
        public string Attention { get; private set; }
        public string PhoneDayTime { get; private set; }

        public string CirixName1 { get; private set; }
        public string CirixName2 { get; private set; }
        public string CirixStreet2 { get; private set; }
        //public string CirixSocialSecurityNo { get; private set; }

        public List<Subscription> SubsHistory { get; private set; }


        #endregion

        #region Constructor
        public Person2(bool isSubscriber, bool hasPostalPlaceAddress, string firstName, string lastName, string careOf, string company, string streetName,
                string houseNo, string stairCase, string stairs, string apartmentNo, string zipCode, string city,
                string mobilePhone, string email, string socialSecurityNo, string companyNo, string attention, string phoneDayTime)
        {
            IsSubscriber = isSubscriber;
            HasPostalPlaceAddress = hasPostalPlaceAddress;
            FirstName = MiscFunctions.REC(firstName, true);
            LastName = MiscFunctions.REC(lastName, true);
            CareOf = MiscFunctions.REC(careOf, true);
            Company = MiscFunctions.REC(company, true);
            StreetName = MiscFunctions.REC(streetName, true);
            HouseNo = MiscFunctions.REC(houseNo, true);
            StairCase = MiscFunctions.REC(stairCase, true);
            Stairs = MiscFunctions.REC(stairs, true);
            ApartmentNo = MiscFunctions.REC(apartmentNo, true);
            ZipCode = MiscFunctions.REC(zipCode, true);
            City = MiscFunctions.REC(city, true);
            MobilePhone = MiscFunctions.FormatPhoneNumber(MiscFunctions.REC(mobilePhone, true), PHONE_MAX_NO_OF_DIGITS, true);
            Email = MiscFunctions.REC(email, false);
            SocialSecurityNo = MiscFunctions.FormatSocialSecurityNo(MiscFunctions.REC(socialSecurityNo, true));
            CompanyNo = MiscFunctions.REC(companyNo, true);
            Attention = MiscFunctions.REC(attention, true);
            PhoneDayTime = MiscFunctions.FormatPhoneNumber(MiscFunctions.REC(phoneDayTime, true), PHONE_MAX_NO_OF_DIGITS, false);

            SetCirixNames();
            CirixStreet2 = (CareOf + " " + ApartmentNo).Trim();
            //CirixSocialSecurityNo = !string.IsNullOrEmpty(SocialSecurityNo) ? SocialSecurityNo : CompanyNo;
        }
        #endregion

        #region Method
        /// <summary>
        /// Set Cirix names that applies the Cirix' naming rules
        /// </summary>
        private void SetCirixNames()
        {
            if (string.IsNullOrEmpty(Company))
            {
                CirixName1 = string.Format("{0} {1}", LastName, FirstName);
                CirixName2 = string.Empty;
            }
            else
            {
                CirixName1 = Company;
                CirixName2 = string.Format("{0} {1} {2}", Attention, LastName, FirstName).Trim();
            }
        }

        //use for logging
        /// <summary>
        /// This method is used for loggin information about person
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            if (IsSubscriber)
                sb.AppendFormat("<b>{0}</b><br>", EPiServer.Core.LanguageManager.Instance.Translate("/subscription/email/subscriber"));
            else
                sb.AppendFormat("<b>{0}</b><br>", EPiServer.Core.LanguageManager.Instance.Translate("/subscription/email/subscriptionpayer"));

            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/subscription/email/username"), UserName);
            //sb.AppendFormat("Password: {1}<br>", Password);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/subscription/email/haspostalplaceaddress"),
                                                HasPostalPlaceAddress
                                                ? EPiServer.Core.LanguageManager.Instance.Translate("/common/yes")
                                                : EPiServer.Core.LanguageManager.Instance.Translate("/common/no"));

            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/user/firstname"), FirstName);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/user/lastname"), LastName);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/address/careof"), CareOf);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/company/company"), Company);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/address/streetaddress"), StreetName);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/address/number"), HouseNo);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/address/staircase"), StairCase);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/address/stairs"), Stairs);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/address/apartmentnumber"), ApartmentNo);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/address/zip"), ZipCode);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/address/city"), City);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/user/phonedaytime"), PhoneDayTime);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/user/mobiletelephone"), MobilePhone);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/user/personalemailaddress"), Email);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/user/socialsecurity"), SocialSecurityNo);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/company/companyno"), CompanyNo);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/common/address/attention"), Attention);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/subscription/email/cirixname1"), CirixName1);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/subscription/email/cirixname2"), CirixName2);
            sb.AppendFormat("{0}: {1}<br>", EPiServer.Core.LanguageManager.Instance.Translate("/subscription/email/cirixstreet2"), CirixStreet2);
            //sb.AppendFormat("{0}: {1}<hr>", EPiServer.Core.LanguageManager.Instance.Translate("/subscription/email/cirixsocialsecurityno"), CirixSocialSecurityNo);

            return sb.ToString();
        }

        #endregion



        internal void PopulateSubsHistory()
        {
            DataSet dsSubs = CirixDbHandler.Ws.GetSubscriptions_(Cusno, "FALSE", "WEBCIRIX");
            foreach (DataRow dr in dsSubs.Tables[0].Rows)
            {

            }
        }



        public bool HasActiveSubs
        {
            get
            {
                List<string> subsStateActiveVals = new List<string> { "00", "01", "02" };         //00=giltig from, 01=aktiv, 02=uppehåll

                foreach (Subscription sub in SubsHistory)
                {
                    //if (subsStateActiveVals.Contains(sub.SubsState))
                    return true;
                }

                return false;
            }
        }

    }
}
