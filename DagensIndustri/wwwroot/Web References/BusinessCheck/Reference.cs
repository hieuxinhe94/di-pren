//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace DagensIndustri.BusinessCheck {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DataImport2Soap", Namespace="http://www.businesscheck.se/Services/DataImport2")]
    public partial class DataImport2 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DataImport2PersonOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataImport2PersonKopiaInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataImport2PersonBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataImport2PersonBrokerKopiaInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataImport2PersonKopiaOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataImport2CompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataImport2CompanyKopiaInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataImport2CompanyBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataImport2CompanyBrokerKopiaInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DataImport2CompanyKopiaOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DataImport2() {
            this.Url = global::DagensIndustri.Properties.Settings.Default.DagensIndustri_BusinessCheck_DataImport2;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DataImport2PersonCompletedEventHandler DataImport2PersonCompleted;
        
        /// <remarks/>
        public event DataImport2PersonKopiaInfoCompletedEventHandler DataImport2PersonKopiaInfoCompleted;
        
        /// <remarks/>
        public event DataImport2PersonBrokerCompletedEventHandler DataImport2PersonBrokerCompleted;
        
        /// <remarks/>
        public event DataImport2PersonBrokerKopiaInfoCompletedEventHandler DataImport2PersonBrokerKopiaInfoCompleted;
        
        /// <remarks/>
        public event DataImport2PersonKopiaCompletedEventHandler DataImport2PersonKopiaCompleted;
        
        /// <remarks/>
        public event DataImport2CompanyCompletedEventHandler DataImport2CompanyCompleted;
        
        /// <remarks/>
        public event DataImport2CompanyKopiaInfoCompletedEventHandler DataImport2CompanyKopiaInfoCompleted;
        
        /// <remarks/>
        public event DataImport2CompanyBrokerCompletedEventHandler DataImport2CompanyBrokerCompleted;
        
        /// <remarks/>
        public event DataImport2CompanyBrokerKopiaInfoCompletedEventHandler DataImport2CompanyBrokerKopiaInfoCompleted;
        
        /// <remarks/>
        public event DataImport2CompanyKopiaCompletedEventHandler DataImport2CompanyKopiaCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2Person", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2Person(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string PersonNumber) {
            object[] results = this.Invoke("DataImport2Person", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        PackageName,
                        PersonNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2PersonAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string PersonNumber) {
            this.DataImport2PersonAsync(CustomerLoginName, UserLoginName, Password, Language, PackageName, PersonNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2PersonAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string PersonNumber, object userState) {
            if ((this.DataImport2PersonOperationCompleted == null)) {
                this.DataImport2PersonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2PersonOperationCompleted);
            }
            this.InvokeAsync("DataImport2Person", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        PackageName,
                        PersonNumber}, this.DataImport2PersonOperationCompleted, userState);
        }
        
        private void OnDataImport2PersonOperationCompleted(object arg) {
            if ((this.DataImport2PersonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2PersonCompleted(this, new DataImport2PersonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2PersonKopiaInfo", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2PersonKopiaInfo(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string PersonNumber, string CustomerPopularName, string CustomerClientName, string OmfragadEmail, string OmfragadMobileNumber) {
            object[] results = this.Invoke("DataImport2PersonKopiaInfo", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        PackageName,
                        PersonNumber,
                        CustomerPopularName,
                        CustomerClientName,
                        OmfragadEmail,
                        OmfragadMobileNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2PersonKopiaInfoAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string PersonNumber, string CustomerPopularName, string CustomerClientName, string OmfragadEmail, string OmfragadMobileNumber) {
            this.DataImport2PersonKopiaInfoAsync(CustomerLoginName, UserLoginName, Password, Language, PackageName, PersonNumber, CustomerPopularName, CustomerClientName, OmfragadEmail, OmfragadMobileNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2PersonKopiaInfoAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string PersonNumber, string CustomerPopularName, string CustomerClientName, string OmfragadEmail, string OmfragadMobileNumber, object userState) {
            if ((this.DataImport2PersonKopiaInfoOperationCompleted == null)) {
                this.DataImport2PersonKopiaInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2PersonKopiaInfoOperationCompleted);
            }
            this.InvokeAsync("DataImport2PersonKopiaInfo", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        PackageName,
                        PersonNumber,
                        CustomerPopularName,
                        CustomerClientName,
                        OmfragadEmail,
                        OmfragadMobileNumber}, this.DataImport2PersonKopiaInfoOperationCompleted, userState);
        }
        
        private void OnDataImport2PersonKopiaInfoOperationCompleted(object arg) {
            if ((this.DataImport2PersonKopiaInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2PersonKopiaInfoCompleted(this, new DataImport2PersonKopiaInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2PersonBroker", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2PersonBroker(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string PersonNumber) {
            object[] results = this.Invoke("DataImport2PersonBroker", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        PersonNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2PersonBrokerAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string PersonNumber) {
            this.DataImport2PersonBrokerAsync(CustomerLoginName, UserLoginName, Password, Language, CallerPersonNumber, CallerFirstName, CallerLastName, CallerOrganizationNumber, CallerCompanyName, CallerAddress, CallerZipCode, CallerCity, PackageName, PersonNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2PersonBrokerAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string PersonNumber, object userState) {
            if ((this.DataImport2PersonBrokerOperationCompleted == null)) {
                this.DataImport2PersonBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2PersonBrokerOperationCompleted);
            }
            this.InvokeAsync("DataImport2PersonBroker", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        PersonNumber}, this.DataImport2PersonBrokerOperationCompleted, userState);
        }
        
        private void OnDataImport2PersonBrokerOperationCompleted(object arg) {
            if ((this.DataImport2PersonBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2PersonBrokerCompleted(this, new DataImport2PersonBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2PersonBrokerKopiaInfo" +
            "", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2PersonBrokerKopiaInfo(
                    string CustomerLoginName, 
                    string UserLoginName, 
                    string Password, 
                    string Language, 
                    string CallerPersonNumber, 
                    string CallerFirstName, 
                    string CallerLastName, 
                    string CallerOrganizationNumber, 
                    string CallerCompanyName, 
                    string CallerAddress, 
                    string CallerZipCode, 
                    string CallerCity, 
                    string PackageName, 
                    string PersonNumber, 
                    string CustomerPopularName, 
                    string CustomerClientName, 
                    string OmfragadEmail, 
                    string OmfragadMobileNumber) {
            object[] results = this.Invoke("DataImport2PersonBrokerKopiaInfo", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        PersonNumber,
                        CustomerPopularName,
                        CustomerClientName,
                        OmfragadEmail,
                        OmfragadMobileNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2PersonBrokerKopiaInfoAsync(
                    string CustomerLoginName, 
                    string UserLoginName, 
                    string Password, 
                    string Language, 
                    string CallerPersonNumber, 
                    string CallerFirstName, 
                    string CallerLastName, 
                    string CallerOrganizationNumber, 
                    string CallerCompanyName, 
                    string CallerAddress, 
                    string CallerZipCode, 
                    string CallerCity, 
                    string PackageName, 
                    string PersonNumber, 
                    string CustomerPopularName, 
                    string CustomerClientName, 
                    string OmfragadEmail, 
                    string OmfragadMobileNumber) {
            this.DataImport2PersonBrokerKopiaInfoAsync(CustomerLoginName, UserLoginName, Password, Language, CallerPersonNumber, CallerFirstName, CallerLastName, CallerOrganizationNumber, CallerCompanyName, CallerAddress, CallerZipCode, CallerCity, PackageName, PersonNumber, CustomerPopularName, CustomerClientName, OmfragadEmail, OmfragadMobileNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2PersonBrokerKopiaInfoAsync(
                    string CustomerLoginName, 
                    string UserLoginName, 
                    string Password, 
                    string Language, 
                    string CallerPersonNumber, 
                    string CallerFirstName, 
                    string CallerLastName, 
                    string CallerOrganizationNumber, 
                    string CallerCompanyName, 
                    string CallerAddress, 
                    string CallerZipCode, 
                    string CallerCity, 
                    string PackageName, 
                    string PersonNumber, 
                    string CustomerPopularName, 
                    string CustomerClientName, 
                    string OmfragadEmail, 
                    string OmfragadMobileNumber, 
                    object userState) {
            if ((this.DataImport2PersonBrokerKopiaInfoOperationCompleted == null)) {
                this.DataImport2PersonBrokerKopiaInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2PersonBrokerKopiaInfoOperationCompleted);
            }
            this.InvokeAsync("DataImport2PersonBrokerKopiaInfo", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        PersonNumber,
                        CustomerPopularName,
                        CustomerClientName,
                        OmfragadEmail,
                        OmfragadMobileNumber}, this.DataImport2PersonBrokerKopiaInfoOperationCompleted, userState);
        }
        
        private void OnDataImport2PersonBrokerKopiaInfoOperationCompleted(object arg) {
            if ((this.DataImport2PersonBrokerKopiaInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2PersonBrokerKopiaInfoCompleted(this, new DataImport2PersonBrokerKopiaInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2PersonKopia", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2PersonKopia(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string PersonNumber) {
            object[] results = this.Invoke("DataImport2PersonKopia", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        PersonNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2PersonKopiaAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string PersonNumber) {
            this.DataImport2PersonKopiaAsync(CustomerLoginName, UserLoginName, Password, Language, CallerPersonNumber, CallerFirstName, CallerLastName, CallerOrganizationNumber, CallerCompanyName, CallerAddress, CallerZipCode, CallerCity, PackageName, PersonNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2PersonKopiaAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string PersonNumber, object userState) {
            if ((this.DataImport2PersonKopiaOperationCompleted == null)) {
                this.DataImport2PersonKopiaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2PersonKopiaOperationCompleted);
            }
            this.InvokeAsync("DataImport2PersonKopia", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        PersonNumber}, this.DataImport2PersonKopiaOperationCompleted, userState);
        }
        
        private void OnDataImport2PersonKopiaOperationCompleted(object arg) {
            if ((this.DataImport2PersonKopiaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2PersonKopiaCompleted(this, new DataImport2PersonKopiaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2Company", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2Company(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string OrganizationNumber) {
            object[] results = this.Invoke("DataImport2Company", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        PackageName,
                        OrganizationNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2CompanyAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string OrganizationNumber) {
            this.DataImport2CompanyAsync(CustomerLoginName, UserLoginName, Password, Language, PackageName, OrganizationNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2CompanyAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string OrganizationNumber, object userState) {
            if ((this.DataImport2CompanyOperationCompleted == null)) {
                this.DataImport2CompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2CompanyOperationCompleted);
            }
            this.InvokeAsync("DataImport2Company", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        PackageName,
                        OrganizationNumber}, this.DataImport2CompanyOperationCompleted, userState);
        }
        
        private void OnDataImport2CompanyOperationCompleted(object arg) {
            if ((this.DataImport2CompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2CompanyCompleted(this, new DataImport2CompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2CompanyKopiaInfo", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2CompanyKopiaInfo(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string OrganizationNumber, string CustomerPopularName, string CustomerClientName, string OmfragadEmail, string OmfragadMobileNumber) {
            object[] results = this.Invoke("DataImport2CompanyKopiaInfo", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        PackageName,
                        OrganizationNumber,
                        CustomerPopularName,
                        CustomerClientName,
                        OmfragadEmail,
                        OmfragadMobileNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2CompanyKopiaInfoAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string OrganizationNumber, string CustomerPopularName, string CustomerClientName, string OmfragadEmail, string OmfragadMobileNumber) {
            this.DataImport2CompanyKopiaInfoAsync(CustomerLoginName, UserLoginName, Password, Language, PackageName, OrganizationNumber, CustomerPopularName, CustomerClientName, OmfragadEmail, OmfragadMobileNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2CompanyKopiaInfoAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string PackageName, string OrganizationNumber, string CustomerPopularName, string CustomerClientName, string OmfragadEmail, string OmfragadMobileNumber, object userState) {
            if ((this.DataImport2CompanyKopiaInfoOperationCompleted == null)) {
                this.DataImport2CompanyKopiaInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2CompanyKopiaInfoOperationCompleted);
            }
            this.InvokeAsync("DataImport2CompanyKopiaInfo", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        PackageName,
                        OrganizationNumber,
                        CustomerPopularName,
                        CustomerClientName,
                        OmfragadEmail,
                        OmfragadMobileNumber}, this.DataImport2CompanyKopiaInfoOperationCompleted, userState);
        }
        
        private void OnDataImport2CompanyKopiaInfoOperationCompleted(object arg) {
            if ((this.DataImport2CompanyKopiaInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2CompanyKopiaInfoCompleted(this, new DataImport2CompanyKopiaInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2CompanyBroker", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2CompanyBroker(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string OrganizationNumber) {
            object[] results = this.Invoke("DataImport2CompanyBroker", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        OrganizationNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2CompanyBrokerAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string OrganizationNumber) {
            this.DataImport2CompanyBrokerAsync(CustomerLoginName, UserLoginName, Password, Language, CallerPersonNumber, CallerFirstName, CallerLastName, CallerOrganizationNumber, CallerCompanyName, CallerAddress, CallerZipCode, CallerCity, PackageName, OrganizationNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2CompanyBrokerAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string OrganizationNumber, object userState) {
            if ((this.DataImport2CompanyBrokerOperationCompleted == null)) {
                this.DataImport2CompanyBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2CompanyBrokerOperationCompleted);
            }
            this.InvokeAsync("DataImport2CompanyBroker", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        OrganizationNumber}, this.DataImport2CompanyBrokerOperationCompleted, userState);
        }
        
        private void OnDataImport2CompanyBrokerOperationCompleted(object arg) {
            if ((this.DataImport2CompanyBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2CompanyBrokerCompleted(this, new DataImport2CompanyBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2CompanyBrokerKopiaInf" +
            "o", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2CompanyBrokerKopiaInfo(
                    string CustomerLoginName, 
                    string UserLoginName, 
                    string Password, 
                    string Language, 
                    string CallerPersonNumber, 
                    string CallerFirstName, 
                    string CallerLastName, 
                    string CallerOrganizationNumber, 
                    string CallerCompanyName, 
                    string CallerAddress, 
                    string CallerZipCode, 
                    string CallerCity, 
                    string PackageName, 
                    string OrganizationNumber, 
                    string CustomerPopularName, 
                    string CustomerClientName, 
                    string OmfragadEmail, 
                    string OmfragadMobileNumber) {
            object[] results = this.Invoke("DataImport2CompanyBrokerKopiaInfo", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        OrganizationNumber,
                        CustomerPopularName,
                        CustomerClientName,
                        OmfragadEmail,
                        OmfragadMobileNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2CompanyBrokerKopiaInfoAsync(
                    string CustomerLoginName, 
                    string UserLoginName, 
                    string Password, 
                    string Language, 
                    string CallerPersonNumber, 
                    string CallerFirstName, 
                    string CallerLastName, 
                    string CallerOrganizationNumber, 
                    string CallerCompanyName, 
                    string CallerAddress, 
                    string CallerZipCode, 
                    string CallerCity, 
                    string PackageName, 
                    string OrganizationNumber, 
                    string CustomerPopularName, 
                    string CustomerClientName, 
                    string OmfragadEmail, 
                    string OmfragadMobileNumber) {
            this.DataImport2CompanyBrokerKopiaInfoAsync(CustomerLoginName, UserLoginName, Password, Language, CallerPersonNumber, CallerFirstName, CallerLastName, CallerOrganizationNumber, CallerCompanyName, CallerAddress, CallerZipCode, CallerCity, PackageName, OrganizationNumber, CustomerPopularName, CustomerClientName, OmfragadEmail, OmfragadMobileNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2CompanyBrokerKopiaInfoAsync(
                    string CustomerLoginName, 
                    string UserLoginName, 
                    string Password, 
                    string Language, 
                    string CallerPersonNumber, 
                    string CallerFirstName, 
                    string CallerLastName, 
                    string CallerOrganizationNumber, 
                    string CallerCompanyName, 
                    string CallerAddress, 
                    string CallerZipCode, 
                    string CallerCity, 
                    string PackageName, 
                    string OrganizationNumber, 
                    string CustomerPopularName, 
                    string CustomerClientName, 
                    string OmfragadEmail, 
                    string OmfragadMobileNumber, 
                    object userState) {
            if ((this.DataImport2CompanyBrokerKopiaInfoOperationCompleted == null)) {
                this.DataImport2CompanyBrokerKopiaInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2CompanyBrokerKopiaInfoOperationCompleted);
            }
            this.InvokeAsync("DataImport2CompanyBrokerKopiaInfo", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        OrganizationNumber,
                        CustomerPopularName,
                        CustomerClientName,
                        OmfragadEmail,
                        OmfragadMobileNumber}, this.DataImport2CompanyBrokerKopiaInfoOperationCompleted, userState);
        }
        
        private void OnDataImport2CompanyBrokerKopiaInfoOperationCompleted(object arg) {
            if ((this.DataImport2CompanyBrokerKopiaInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2CompanyBrokerKopiaInfoCompleted(this, new DataImport2CompanyBrokerKopiaInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.businesscheck.se/Services/DataImport2/DataImport2CompanyKopia", RequestNamespace="http://www.businesscheck.se/Services/DataImport2", ResponseNamespace="http://www.businesscheck.se/Services/DataImport2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataImport2Result DataImport2CompanyKopia(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string OrganizationNumber) {
            object[] results = this.Invoke("DataImport2CompanyKopia", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        OrganizationNumber});
            return ((DataImport2Result)(results[0]));
        }
        
        /// <remarks/>
        public void DataImport2CompanyKopiaAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string OrganizationNumber) {
            this.DataImport2CompanyKopiaAsync(CustomerLoginName, UserLoginName, Password, Language, CallerPersonNumber, CallerFirstName, CallerLastName, CallerOrganizationNumber, CallerCompanyName, CallerAddress, CallerZipCode, CallerCity, PackageName, OrganizationNumber, null);
        }
        
        /// <remarks/>
        public void DataImport2CompanyKopiaAsync(string CustomerLoginName, string UserLoginName, string Password, string Language, string CallerPersonNumber, string CallerFirstName, string CallerLastName, string CallerOrganizationNumber, string CallerCompanyName, string CallerAddress, string CallerZipCode, string CallerCity, string PackageName, string OrganizationNumber, object userState) {
            if ((this.DataImport2CompanyKopiaOperationCompleted == null)) {
                this.DataImport2CompanyKopiaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataImport2CompanyKopiaOperationCompleted);
            }
            this.InvokeAsync("DataImport2CompanyKopia", new object[] {
                        CustomerLoginName,
                        UserLoginName,
                        Password,
                        Language,
                        CallerPersonNumber,
                        CallerFirstName,
                        CallerLastName,
                        CallerOrganizationNumber,
                        CallerCompanyName,
                        CallerAddress,
                        CallerZipCode,
                        CallerCity,
                        PackageName,
                        OrganizationNumber}, this.DataImport2CompanyKopiaOperationCompleted, userState);
        }
        
        private void OnDataImport2CompanyKopiaOperationCompleted(object arg) {
            if ((this.DataImport2CompanyKopiaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DataImport2CompanyKopiaCompleted(this, new DataImport2CompanyKopiaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.businesscheck.se/Services/DataImport2")]
    public partial class DataImport2Result {
        
        private string numberField;
        
        private Block[] blocksField;
        
        private Error errorField;
        
        /// <remarks/>
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        public Block[] Blocks {
            get {
                return this.blocksField;
            }
            set {
                this.blocksField = value;
            }
        }
        
        /// <remarks/>
        public Error Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.businesscheck.se/Services/DataImport2")]
    public partial class Block {
        
        private string codeField;
        
        private int segmentField;
        
        private bool segmentFieldSpecified;
        
        private Field[] fieldsField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public int Segment {
            get {
                return this.segmentField;
            }
            set {
                this.segmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SegmentSpecified {
            get {
                return this.segmentFieldSpecified;
            }
            set {
                this.segmentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public Field[] Fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.businesscheck.se/Services/DataImport2")]
    public partial class Field {
        
        private string codeField;
        
        private string valueField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34209")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.businesscheck.se/Services/DataImport2")]
    public partial class Error {
        
        private int errorCodeField;
        
        private string errorMessageField;
        
        /// <remarks/>
        public int ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2PersonCompletedEventHandler(object sender, DataImport2PersonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2PersonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2PersonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2PersonKopiaInfoCompletedEventHandler(object sender, DataImport2PersonKopiaInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2PersonKopiaInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2PersonKopiaInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2PersonBrokerCompletedEventHandler(object sender, DataImport2PersonBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2PersonBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2PersonBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2PersonBrokerKopiaInfoCompletedEventHandler(object sender, DataImport2PersonBrokerKopiaInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2PersonBrokerKopiaInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2PersonBrokerKopiaInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2PersonKopiaCompletedEventHandler(object sender, DataImport2PersonKopiaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2PersonKopiaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2PersonKopiaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2CompanyCompletedEventHandler(object sender, DataImport2CompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2CompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2CompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2CompanyKopiaInfoCompletedEventHandler(object sender, DataImport2CompanyKopiaInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2CompanyKopiaInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2CompanyKopiaInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2CompanyBrokerCompletedEventHandler(object sender, DataImport2CompanyBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2CompanyBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2CompanyBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2CompanyBrokerKopiaInfoCompletedEventHandler(object sender, DataImport2CompanyBrokerKopiaInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2CompanyBrokerKopiaInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2CompanyBrokerKopiaInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void DataImport2CompanyKopiaCompletedEventHandler(object sender, DataImport2CompanyKopiaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DataImport2CompanyKopiaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DataImport2CompanyKopiaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DataImport2Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DataImport2Result)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591