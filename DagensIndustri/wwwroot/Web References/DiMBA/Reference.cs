//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace DagensIndustri.DiMBA {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DIMBASoap", Namespace="http://educations.com/")]
    public partial class DIMBA : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback InsertContestantOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DIMBA() {
            this.Url = global::DagensIndustri.Properties.Settings.Default.DagensIndustri_DiMBA_DIMBA;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event InsertContestantCompletedEventHandler InsertContestantCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://educations.com/InsertContestant", RequestNamespace="http://educations.com/", ResponseNamespace="http://educations.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertContestant(
                    string nomination, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string personNumber, 
                    string company, 
                    string position, 
                    string address, 
                    string postalNumber, 
                    string place, 
                    string mobileNumber, 
                    string academicEducation, 
                    string academicPoints, 
                    string workYears, 
                    string englishLevel, 
                    string linkedInUrl, 
                    string motivation) {
            object[] results = this.Invoke("InsertContestant", new object[] {
                        nomination,
                        email,
                        firstName,
                        lastName,
                        personNumber,
                        company,
                        position,
                        address,
                        postalNumber,
                        place,
                        mobileNumber,
                        academicEducation,
                        academicPoints,
                        workYears,
                        englishLevel,
                        linkedInUrl,
                        motivation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertContestantAsync(
                    string nomination, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string personNumber, 
                    string company, 
                    string position, 
                    string address, 
                    string postalNumber, 
                    string place, 
                    string mobileNumber, 
                    string academicEducation, 
                    string academicPoints, 
                    string workYears, 
                    string englishLevel, 
                    string linkedInUrl, 
                    string motivation) {
            this.InsertContestantAsync(nomination, email, firstName, lastName, personNumber, company, position, address, postalNumber, place, mobileNumber, academicEducation, academicPoints, workYears, englishLevel, linkedInUrl, motivation, null);
        }
        
        /// <remarks/>
        public void InsertContestantAsync(
                    string nomination, 
                    string email, 
                    string firstName, 
                    string lastName, 
                    string personNumber, 
                    string company, 
                    string position, 
                    string address, 
                    string postalNumber, 
                    string place, 
                    string mobileNumber, 
                    string academicEducation, 
                    string academicPoints, 
                    string workYears, 
                    string englishLevel, 
                    string linkedInUrl, 
                    string motivation, 
                    object userState) {
            if ((this.InsertContestantOperationCompleted == null)) {
                this.InsertContestantOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertContestantOperationCompleted);
            }
            this.InvokeAsync("InsertContestant", new object[] {
                        nomination,
                        email,
                        firstName,
                        lastName,
                        personNumber,
                        company,
                        position,
                        address,
                        postalNumber,
                        place,
                        mobileNumber,
                        academicEducation,
                        academicPoints,
                        workYears,
                        englishLevel,
                        linkedInUrl,
                        motivation}, this.InsertContestantOperationCompleted, userState);
        }
        
        private void OnInsertContestantOperationCompleted(object arg) {
            if ((this.InsertContestantCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertContestantCompleted(this, new InsertContestantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void InsertContestantCompletedEventHandler(object sender, InsertContestantCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertContestantCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertContestantCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591